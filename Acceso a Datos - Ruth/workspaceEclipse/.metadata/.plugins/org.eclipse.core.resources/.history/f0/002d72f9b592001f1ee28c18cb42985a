

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * Servlet implementation class Ejer2
 */
@WebServlet("/Ejer2")
public class Ejer2 extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public Ejer2() {
        super();
        // TODO Auto-generated constructor stub
    }
    
    /*Crea una aplicación que genera repeticiones de números enteros aleatorios, que
	almacena en un array. El Servlet suma todos estos números a una variable
	instancia con nombre valor. A continuación, resta todos esos números y genera
	una página web donde se muestra el valor de la variable valor. En principio,
	parece que valor siempre debería ser 0.
	Para probar los problemas de concurrencia si hacemos diferentes peticiones al
	servlet creado implementa una página HTML que contenga 25 iframes. Cada
	uno de estos frames va a incluir el contenido de la URL al servlte. Este es el
	código de la página web repetido 25 veces:
	<iframe src="/EjercicioV/Ejercicio2" width="19%" > </iframe>
	Ejecutando simultáneamente desde dos pestañas distintas del navegador ¿Qué
	ocurre? Controla la concurrencia.*/
	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		int[] array = new int[10];
		int valor = 0;
		for (int i = 0; i < array.length; i++) {
			array[i] = (int) (Math.random() * 10);
			valor += array[i];
		}
		for (int i = 0; i < array.length; i++) {
			valor -= array[i];
		}
		response.getWriter().append("El valor es: " + valor);
		
		
		
	}


}
